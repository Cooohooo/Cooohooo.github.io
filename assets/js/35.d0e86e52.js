(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{357:function(t,s,a){"use strict";a.r(s);var n=a(33),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"原型链讲解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型链讲解"}},[t._v("#")]),t._v(" 原型链讲解")]),t._v(" "),a("h2",{attrs:{id:"js中prototype，proto，constructor的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js中prototype，proto，constructor的关系"}},[t._v("#")]),t._v(" JS中prototype，"),a("strong",[t._v("proto")]),t._v("，constructor的关系")]),t._v(" "),a("p",[t._v("在JS中，当我们创建一个函数的时候，就根据一组特定的规则给这个函数创建一个prototype属性，这个属性指向这个函数的原型对象。在默认情况下，每个原型对象都会自动获得一个constructor属性，这个属性指向这个函数。来看下面的代码：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Cooohooo/cary-notebook-image/master/images/%E5%8E%9F%E5%9E%8B%E9%93%BE%E8%AE%B2%E8%A7%A3_2.png",alt:"原型链讲解_2"}})]),t._v(" "),a("p",[t._v("上面的代码中，新建了一个Person对象，然后在Person的原型对象上（Person.prototype）添加了属性和方法，Person的原型对象有个constructor属性，指向Person。通过new Person()创建了两个实例对象person1和person2，person1的__proto__指向的就是Person的原型对象。下图表明了上述关系。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Cooohooo/cary-notebook-image/master/images/%E5%8E%9F%E5%9E%8B%E9%93%BE%E8%AE%B2%E8%A7%A3_3.png",alt:"原型链讲解_3"}})]),t._v(" "),a("h2",{attrs:{id:"在原型对象中查找值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在原型对象中查找值"}},[t._v("#")]),t._v(" 在原型对象中查找值")]),t._v(" "),a("p",[t._v("继承是面向对象语言的一种重要特征，作为一门面向对象语言，JavaScript 当然也有继承这个概念，只不过 JavaScript 的继承主要是靠 原型链 来实现。")]),t._v(" "),a("h3",{attrs:{id:"放一个例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#放一个例子"}},[t._v("#")]),t._v(" 放一个例子")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Ⅰ. Parent 的构造函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Parent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("who")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("who "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" who"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Ⅱ. 为 Parent 的原型添加方法")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Parent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("say")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'I am '")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("who"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Ⅲ. Children 的构造函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Children")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("who")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("who "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" who"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Ⅳ. 实例化一个 Parent 的对象")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" parent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Parent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'parent'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Ⅴ. Parent 的实例作为 Children 的原型对象")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Children")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" parent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Ⅵ. 实例化一个 Children 的对象")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" children "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Children")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'children'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Ⅶ. 调用 children 的 say() 方法")]),t._v("\n    children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("say")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("br"),t._v(" "),a("h3",{attrs:{id:"效果如下"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#效果如下"}},[t._v("#")]),t._v(" 效果如下:")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Cooohooo/cary-notebook-image/master/images/1.png",alt:"1"}})]),t._v(" "),a("h3",{attrs:{id:"结果分析："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结果分析："}},[t._v("#")]),t._v(" 结果分析：")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("在 Ⅶ 中我们调用了 children 对象的 say() 方法，但是我们并没有给 children 这个对象定义这样一个方法，"),a("font",{attrs:{color:"red"}},[t._v("根据原型链查找机制，JavaScript 会往其构造函数里找；")])],1),t._v(" "),a("li",[t._v("在 Ⅲ Children 的构造函数中也没有找到 say() 这个方法，"),a("font",{attrs:{color:"red"}},[t._v("这时就会往其原型上找")]),t._v("；")],1),t._v(" "),a("li",[t._v("在 Ⅴ 中，我们发现 Children 的原型是 Parent 的实例，所以，"),a("font",{attrs:{color:"red"}},[t._v("继续往 Parent 的构造函数里找")]),t._v("，这时来到了 Ⅰ；")],1),t._v(" "),a("li",[t._v("在 Ⅰ 中，我们发现 Parent 的构造函数里也没有 say() 这个方法，所以，"),a("font",{attrs:{color:"red"}},[t._v("继续往Parent的原型上找")]),t._v("；")],1),t._v(" "),a("li",[t._v("在 Ⅱ 中，也就是 Parent 的原型上，"),a("font",{attrs:{color:"red"}},[t._v("我们找到了say() 这个方法，")]),t._v("这时，查找结束，返回该方法。")],1)])]),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"原型对象的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型对象的问题"}},[t._v("#")]),t._v(" 原型对象的问题")]),t._v(" "),a("p",[t._v("前面我们将共享的属性写在原型对象中，解决了构造函数模式和工厂模式中不共享的问题。但是原型对象模式也存在问题，原型对象对于函数和基本类型的共享不存在问题，因为基本类型可以屏蔽掉原型，但是对于引用类型的属性则存在一定的影响，看下面的例子：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Cooohooo/cary-notebook-image/master/images/%E5%8E%9F%E5%9E%8B%E9%93%BE%E8%AE%B2%E8%A7%A3_4.png",alt:"原型链讲解_4"}}),t._v(" "),a("br"),t._v("\n给person1又添加了一个朋友后，person2也多了这个朋友。这时候原型模式也存在问题了。")]),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"组合使用构造函数模式和原型模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合使用构造函数模式和原型模式"}},[t._v("#")]),t._v(" 组合使用构造函数模式和原型模式")]),t._v(" "),a("p",[t._v("要解决上面的问题，我们可以组合使用构造函数模式和原型模式，对于私有的属性，在构造函数中定义，对于共享的属性在原型中定义。\n"),a("br")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Cooohooo/cary-notebook-image/master/images/%E5%8E%9F%E5%9E%8B%E9%93%BE%E8%AE%B2%E8%A7%A3_5.png",alt:"原型链讲解_5"}})]),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"原型链继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型链继承"}},[t._v("#")]),t._v(" 原型链继承")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Cooohooo/cary-notebook-image/master/images/%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%9B%BE%E8%A7%A3.png",alt:"原型链图解"}})]),t._v(" "),a("h3",{attrs:{id:"图解："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图解："}},[t._v("#")]),t._v(" 图解：")]),t._v(" "),a("h4",{attrs:{id:"prototype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prototype"}},[t._v("#")]),t._v(" prototype:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 虽然写在注释里，但是你要注意")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// prototype是函数才会有的属性")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Kevin'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" foo1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" foo2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Kevin")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Kevin")]),t._v("\n")])])]),a("p",[t._v("每个函数都有一个prototype属性，那该属性指向啥呢？当然是一个对象了，这个对象正是调用该构造函数而创建的实例的原型（见图理解）也就是这个例子中foo1和foo2的原型。（原型：每一个js对象创建的时候都有与之对应的另外一个对象，该对象就是原型，且每个对象都可以从原型“继承”属性）")]),t._v(" "),a("h4",{attrs:{id:"proto"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proto"}},[t._v("#")]),t._v(" _"),a("em",[t._v("proto")]),t._v("_:")]),t._v(" "),a("p",[t._v("上面的构造函数Person可通过prototype指向原型，那实例化对象比如foo1也有方法指向原型")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("这里面的首先给实例原型赋属性值name为“Kevin”，下面给实例化对象也赋属性name为“Daisy”，第一遍访问person的name属性时，值为“Daisy”，delete之后，实例化本身的name已经为空，所以再次访问的时候，就会往上一层寻找name属性，即通过prototype赋的name值，所以这时的值是“Kevin“原型的值通过__proto__被实例化对象继承，")]),t._v(" "),a("h4",{attrs:{id:"constructor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[t._v("#")]),t._v(" constructor:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("显而意见，Person的prototype指向原型，原型的constructor指向Person")]),t._v(" "),a("h3",{attrs:{id:"原型的原型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型的原型"}},[t._v("#")]),t._v(" 原型的原型:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Kevin'")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Kevin")]),t._v("\n")])])]),a("p",[t._v("这里面可通过最原始的方法创建obj，表示的是不管你是什么玩意，只要类型是对象，都有一个原型与之对应。当然是原始Object的原型了，再结合之前所讲，实例的__proto__指向构造函数的prototype，所以有Person.prototype通过__proto__指向其原型Object.prototype")]),t._v(" "),a("h3",{attrs:{id:"继承or委托？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承or委托？"}},[t._v("#")]),t._v(" 继承or委托？")]),t._v(" "),a("p",[t._v("这里补充继承，引用《你不知道的JavaScript》中的话就是：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("继承意味着复制操作，然而 JavaScript 默认并不会复制对象的属性，相反，JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些。\n")])])]),a("p",[t._v("方便经常用的 document.getElementById(id) 的书写方便：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("$( ) 方法是在DOM中使用过于频繁的 document.getElementById() 方法的一个便利的简写，就像这个DOM方法一样，这个方法返回参数传入的id的那个元素")])])}),[],!1,null,null,null);s.default=r.exports}}]);