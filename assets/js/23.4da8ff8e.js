(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{346:function(t,a,s){"use strict";s.r(a);var n=s(33),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"floyd-算法详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#floyd-算法详解"}},[t._v("#")]),t._v(" Floyd 算法详解")]),t._v(" "),s("p",[t._v("转载自：https://juejin.im/post/5cc79c93f265da035b61a42e")]),t._v(" "),s("p",[t._v("存在[0,1,2,3] 4 个点，两点之间的距离就是边上的数字，如果两点之间，没有边相连，则无法到达，为无穷大。 b）要让任意两点（例如从顶点 a 点到顶点 b）之间的路程变短，只能引入第三个点（顶点 k），并通过这个顶点 k 中转即 a->k->b，才可能缩短原来从顶点 a 点到顶点 b 的路程。那么这个中转的顶点 k 是 0~n 中的哪个点呢？"),s("br")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/Cooohooo/cary-notebook-image/master/images/f1.png",alt:"f1"}})]),t._v(" "),s("h2",{attrs:{id:"算法过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法过程"}},[t._v("#")]),t._v(" 算法过程")]),t._v(" "),s("h3",{attrs:{id:"准备"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#准备"}},[t._v("#")]),t._v(" 准备")]),t._v(" "),s("ol",[s("li",[t._v("如图 0->1 距离为 5，0->2 不可达，距离为 ∞，0->3 距离为 7……依次可将图转化为邻接矩阵（主对角线，也就是自身到自身，我们规定距离为 0，不可达为无穷大），如图矩阵 用于存放任意一对顶点之间的最短路径权值")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/Cooohooo/cary-notebook-image/master/images/f2.png",alt:"f2"}})]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("再创建一个二维数组 Path 路径数组，用于存放任意一对顶点之间的最短路径。每个单元格的内容表示从 i 点到 j 点途经的顶点。（初始还未开始查找，默认-1）")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/Cooohooo/cary-notebook-image/master/images/f3.png",alt:"f3"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/Cooohooo/cary-notebook-image/master/images/f4.png",alt:"f4"}})]),t._v(" "),s("h3",{attrs:{id:"开始查找"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开始查找"}},[t._v("#")]),t._v(" 开始查找")]),t._v(" "),s("ol",[s("li",[t._v("列举所有的路径（自己到自己不算）")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/Cooohooo/cary-notebook-image/master/images/f5.png",alt:"f5"}})]),t._v(" "),s("p",[t._v("即为： 0 -> 1 , 0 -> 2 , 0 -> 3 ,\n1 -> 0 , 1 -> 2 , 1 -> 3 , 2 -> 0 , 1 -> 1 , 1 -> 3 转化成二元数组即为： {0，1}，{0，2}，{0，3}，{1，0}，{1，2}，{1，3}，{2，0}，{2，1}，{2，3}，{3，0}，{3，1}，{3，2}")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("选择编号为 0 的点为中间点")])]),t._v(" "),s("p",[t._v("{0，1}，{0，2}，{0，3}，{1，0}，{1，2}，{1，3}，{2，0}，{2，1}，{2，3}，{3，0}，{3，1}，{3，2} 从上面中二元组集合的第一个元素开始，循环执行以下过程：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v(" 用i，j两个变量分别指向二元组里的两个元素，比如"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("，"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("这个二元组，i指向"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("；j指向"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v(" 判断 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" （即判断 i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" j，i点到j点的距离是否小于从"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("点中转的距离），如果"),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("，则判断下一组二元数组。\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),t._v(" 如果表达式为真，更新A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("的值为A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("，Path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("的值为点"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("（即设置i到j要经过"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("点中转）\n")])])]),s("p",[t._v("{0，1}按照此过程执行之后，")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/Cooohooo/cary-notebook-image/master/images/f6.png",alt:"f6"}})]),t._v(" "),s("p",[t._v("0->0 + 0->1 的距离不小于 0->1 ，下一组{0，2}，{0，3}， {1，0}，{2，0}，{3，0}也同理 "),s("br")]),t._v(" "),s("p",[t._v("{1，2}按照此过程执行，A[1,0] 无穷大， A[0,2]也是无穷大，而 A[1,2] = 4，则 1 点到 2 点肯定不会从 0 点中转"),s("br")]),t._v(" "),s("p",[t._v("A[1][0]无穷大同理下一组{1，2}， {1，3}也同理"),s("br")]),t._v(" "),s("p",[t._v("{2，1}按照此过程执行，A[2][0] = 3 ,A[0][1]=5 ，A[2][1] = 3 那么 A[2][0]+ ,A[0][1] > A[2][1] ………… 依次类推，遍历二元组集合，没有 0 点适合做中转的"),s("br")]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("选择编号为 1 的点为中间点")]),t._v(" "),s("li",[t._v("选择编号为 2 的点为中间点")])]),t._v(" "),s("p",[t._v("依次类推，遍历二元组集合{0，1}，{0，2}，{0，3}，{1，0}，{1，2}，{1，3}，{2，0}，{2，1}，{2，3}，{3，0}，{3，1}，{3，2} ，当遍历{3，0}时，A[3][2] = 1 ,A[2][0]=3 ，A[3][0] = 不可达，那么 2 点适合做从 3 点到 0 点之间的中转点。 设置距离矩阵 A[3][0] = 1+3 =4 ，Path 矩阵 Path[3][0] = 2 点，表示从 3 到 0 在 2 点中转，距离最近"),s("br")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/Cooohooo/cary-notebook-image/master/images/f7.png",alt:"f7"}})]),t._v(" "),s("p",[t._v("如图表示（红色单元格），从 3 到 0，最近距离为 4，在 2 点中转 。\n依次类推，遍历完二元组集合")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/Cooohooo/cary-notebook-image/master/images/f8.png",alt:"f8"}})]),t._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[t._v("选择编号为 3 的点为中间点，最终结果，依次类推，遍历二元组集合，直到所有的顶点都做过一次中间点为止")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/Cooohooo/cary-notebook-image/master/images/f9.png",alt:"f9"}})]),t._v(" "),s("ol",{attrs:{start:"6"}},[s("li",[t._v("根据最终结果，就可以知道任意 2 点的最短距离和路径")])]),t._v(" "),s("p",[t._v("比如 1 点到 2 点怎么走？根据路径 Path 矩阵,Path[1][2] = 3，表示从点 3 中转，即 1-> 3 ->2")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/Cooohooo/cary-notebook-image/master/images/f1.png",alt:"f1"}})]),t._v(" "),s("p",[t._v("如果中转点不止 1 个呢？"),s("br")]),t._v(" "),s("p",[t._v("有时候不只通过一个点，而是经过两个点或者更多点中转会更短，即 a->k1->k2b->或者 a->k1->k2…->k->i…->b。 比如顶点 1 到顶点 0，我们看数组 Path Path[1][0] = 3，说明顶点 3 是中转点，那么再从 3 到 0 Path[3][0] = 2，说明从 3 到 0，顶点 2 是中转点，然后在从 2 到 0 Path[2][0] = -1，说明顶点 2 到顶点 0 没有途径顶点，也就是说，可以由顶点 2 直接到顶点 0，即它们有边连接"),s("br")]),t._v(" "),s("p",[t._v("最终，最短路径为 1->3->2->0，距离为 A[1][0] = 6 。 显然，这是一个逐层递进，递归的过程"),s("br")]),t._v(" "),s("h2",{attrs:{id:"代码实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),s("h3",{attrs:{id:"基本定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本定义"}},[t._v("#")]),t._v(" 基本定义")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("    //    表示无穷大 即不可达\n    public static int MAX = Integer.MAX_VALUE;\n    //    距离矩阵\n    public int[][] dist;\n    //    路径Path矩阵\n    public int[][] path;\n")])])]),s("h3",{attrs:{id:"核心算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#核心算法"}},[t._v("#")]),t._v(" 核心算法")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 核心算法")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" k "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" k "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" size "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n           "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n               "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断如果 ik距离可达且 kj距离可达 且 i和j的距离是否大于 i-> k 与 k->j的距离和")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" dist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" MAX "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("  dist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" MAX  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("  dist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" dist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                        path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                        dist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" dist"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n               "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n           "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n       "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);