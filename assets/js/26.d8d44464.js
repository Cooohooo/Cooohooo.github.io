(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{349:function(t,s,a){"use strict";a.r(s);var n=a(33),p=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"dijkstra-算法示例演示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dijkstra-算法示例演示"}},[t._v("#")]),t._v(" Dijkstra 算法示例演示")]),t._v(" "),a("p",[t._v("转载自：https://blog.csdn.net/qq_35644234/article/details/60870719")]),t._v(" "),a("h2",{attrs:{id:"dijkstra-算法基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dijkstra-算法基本概念"}},[t._v("#")]),t._v(" Dijkstra 算法基本概念")]),t._v(" "),a("ul",[a("li",[t._v("初始一个数组 S = { s }，S = V 时算法结束，V 指的是全部顶点的集合")]),t._v(" "),a("li",[t._v("从 s 到 u 相对于 S 的最短路径：从 s 到 u 且仅经过 S 中的顶点的最短路径")]),t._v(" "),a("li",[t._v("定义一个 dist[u]数组，用来储存 s 到 u 相对 S 最短路径的长度")]),t._v(" "),a("li",[t._v("short[u]数组储存的是正确的最短路径的长度集合")]),t._v(" "),a("li",[t._v("dist[u] >= short[u]，因此我们需要不断更新 dist 中的数值，当我们不断将 V 中的顶点往 S 集合中放")])]),t._v(" "),a("p",[t._v("求下图，从顶点 v1 到其他各个顶点的最短路径")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Cooohooo/cary-notebook-image/master/images/d1.png",alt:"d1"}})]),t._v(" "),a("p",[t._v("首先第一步，我们先声明一个 dis 数组，该数组初始化的值为：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Cooohooo/cary-notebook-image/master/images/d2.png",alt:"d2"}})]),t._v(" "),a("p",[t._v("我们的顶点集 T 的初始化为：T={v1} "),a("br")]),t._v(" "),a("p",[t._v("既然是求 v1 顶点到其余各个顶点的最短路程，那就先找一个离 1 号顶点最近的顶点。通过数组 dis 可知当前离 v1 顶点最近是 v3 顶点。当选择了 2 号顶点后，dis[2]（下标从 0 开始）的值就已经从“估计值”变为了“确定值”，即 v1 顶点到 v3 顶点的最短路程就是当前 dis[2]值。将 V3 加入到 T 中 "),a("br")]),t._v(" "),a("p",[t._v("为什么呢？因为目前离 v1 顶点最近的是 v3 顶点，并且这个图所有的边都是正数，那么肯定不可能通过第三个顶点中转，使得 v1 顶点到 v3 顶点的路程进一步缩短了。因为 v1 顶点到其它顶点的路程肯定没有 v1 到 v3 顶点短 "),a("br")]),t._v(" "),a("p",[t._v("OK，既然确定了一个顶点的最短路径，下面我们就要根据这个新入的顶点 V3 会有出度，发现以 v3 为弧尾的有： < v3,v4 >,那么我们看看路径：v1–v3–v4 的长度是否比 v1–v4 短，其实这个已经是很明显的了，因为 dis[3]代表的就是 v1–v4 的长度为无穷大，而 v1–v3–v4 的长度为：10+50=60，所以更新 dis[3]的值,得到如下结果：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Cooohooo/cary-notebook-image/master/images/d3.png",alt:"d3"}})]),t._v(" "),a("p",[t._v("因此 dis[3]要更新为 60。这个过程有个专业术语叫做“松弛”。即 v1 顶点到 v4 顶点的路程即 dis[3]，通过 < v3,v4> 这条边松弛成功。这便是 Dijkstra 算法的主要思想：通过“边”来松弛 v1 顶点到其余各个顶点的路程"),a("br")]),t._v(" "),a("p",[t._v("然后，我们又从除 dis[2]和 dis[0]外的其他值中寻找最小值，发现 dis[4]的值最小，通过之前是解释的原理，可以知道 v1 到 v5 的最短距离就是 dis[4]的值，然后，我们把 v5 加入到集合 T 中，然后，考虑 v5 的出度是否会影响我们的数组 dis 的值，v5 有两条出度：< v5,v4>和 < v5,v6>,然后我们发现：v1–v5–v4 的长度为：50，而 dis[3]的值为 60，所以我们要更新 dis[3]的值.另外，v1-v5-v6 的长度为：90，而 dis[5]为 100，所以我们需要更新 dis[5]的值。更新后的 dis 数组如下图："),a("br")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Cooohooo/cary-notebook-image/master/images/d4.png",alt:"d4"}})]),t._v(" "),a("p",[t._v("然后，继续从 dis 中选择未确定的顶点的值中选择一个最小的值，发现 dis[3]的值是最小的，所以把 v4 加入到集合 T 中，此时集合 T={v1,v3,v5,v4},然后，考虑 v4 的出度是否会影响我们的数组 dis 的值，v4 有一条出度：< v4,v6>,然后我们发现：v1–v5–v4–v6 的长度为：60，而 dis[5]的值为 90，所以我们要更新 dis[5]的值，更新后的 dis 数组如下图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Cooohooo/cary-notebook-image/master/images/d5.png",alt:"d5"}})]),t._v(" "),a("p",[t._v("然后，我们使用同样原理，分别确定了 v6 和 v2 的最短路径，最后 dis 的数组的值如下："),a("br")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Cooohooo/cary-notebook-image/master/images/d6.png",alt:"d6"}})]),t._v(" "),a("p",[t._v("因此，从图中，我们可以发现 v1-v2 的值为：∞，代表没有路径从 v1 到达 v2。所以我们得到的最后的结果为：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("起点")]),t._v(" "),a("th",[t._v("终点")]),t._v(" "),a("th",[t._v("最短路径")]),t._v(" "),a("th",[t._v("长度")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("v1")]),t._v(" "),a("td",[t._v("v2")]),t._v(" "),a("td",[t._v("无")]),t._v(" "),a("td",[t._v("∞")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[t._v("v3")]),t._v(" "),a("td",[t._v("{v1,v3}")]),t._v(" "),a("td",[t._v("10")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[t._v("v4")]),t._v(" "),a("td",[t._v("{v1,v5,v4}")]),t._v(" "),a("td",[t._v("50")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[t._v("v5")]),t._v(" "),a("td",[t._v("{v1,v5}")]),t._v(" "),a("td",[t._v("30")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[t._v("v6")]),t._v(" "),a("td",[t._v("{v1,v5,v4,v6}")]),t._v(" "),a("td",[t._v("60")])])])]),t._v(" "),a("p",[a("br"),t._v("Graph 是邻接矩阵对应的结构体\nvexs 用于保存顶点，vexnum 是顶点数，edgnum 是边数；matrix 则是用于保存矩阵信息的二维数组"),a("br")]),t._v(" "),a("p",[t._v("例如，matrix[i][j]=1，则表示”顶点 i(即 vexs[i])”和”顶点 j(即 vexs[j])”是邻接点；matrix[i][j]=0，则表示它们不是邻接点"),a("br")]),t._v(" "),a("p",[t._v("EData 是邻接矩阵边对应的结构体。")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*\n * Dijkstra最短路径。\n * 即，统计图(G)中"顶点vs"到其它各个顶点的最短路径。\n *\n * 参数说明：\n *        G -- 图\n *       vs -- 起始顶点(start vertex)。即计算"顶点vs"到其它顶点的最短路径。\n *     prev -- 前驱顶点数组。即，prev[i]的值是"顶点vs"到"顶点i"的最短路径所经历的全部顶点中，位于"顶点i"之前的那个顶点。\n *     dist -- 长度数组。即，dist[i]是"顶点vs"到"顶点i"的最短路径的长度。\n */')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dijkstra")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Graph G"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" vs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" prev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" dist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" min"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" flag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// flag[i]=1表示"顶点vs"到"顶点i"的最短路径已成功获取。')]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" G"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("vexnum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        flag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 顶点i的最短路径还没获取到。")]),t._v("\n        prev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 顶点i的前驱顶点为0。")]),t._v("\n        dist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" G"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("matrix"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("vs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 顶点i的最短路径为"顶点vs"到"顶点i"的权。将与初始点有连线的顶点加上权值')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 对"顶点vs"自身进行初始化')]),t._v("\n    flag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("vs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    dist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("vs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历G.vexnum-1次；每次找出一个顶点的最短路径。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" G"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("vexnum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 寻找当前最小的路径；")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 即，在未获取最短路径的顶点中，找到离vs最近的顶点(k)。")]),t._v("\n        min "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" INF"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" G"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("vexnum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" dist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("min"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                min "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                k "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 标记"顶点k"为已经获取到最短路径')]),t._v("\n        flag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 修正当前最短路径和前驱顶点")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 即，当已经"顶点k的最短路径"之后，更新"未获取最短路径的顶点的最短路径和前驱顶点"。')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" G"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("vexnum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            tmp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("G"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("matrix"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("INF "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" INF "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("min "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" G"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("matrix"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 防止溢出")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tmp  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" dist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                dist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                prev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打印dijkstra最短路径的结果")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dijkstra(%c): \\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" G"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("vexs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("vs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" G"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("vexnum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"  shortest(%c, %c)=%d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" G"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("vexs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("vs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" G"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("vexs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=p.exports}}]);