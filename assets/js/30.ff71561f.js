(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{353:function(t,a,s){"use strict";s.r(a);var e=s(33),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"高频前端面试题-基础篇"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高频前端面试题-基础篇"}},[t._v("#")]),t._v(" 高频前端面试题-基础篇")]),t._v(" "),s("h2",{attrs:{id:"html篇"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#html篇"}},[t._v("#")]),t._v(" HTML篇")]),t._v(" "),s("h3",{attrs:{id:"meta-viewport-是做什么用的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#meta-viewport-是做什么用的"}},[t._v("#")]),t._v(" meta viewport 是做什么用的?")]),t._v(" "),s("p",[t._v("将视口大小设置为可视区域的大小。")]),t._v(" "),s("p",[s("strong",[t._v("什么是视口")]),t._v(" "),s("br"),t._v("\n视口简单理解就是可视区域大小。"),s("br"),t._v("\n在PC端，视口大小就是浏览器窗口可视区域的大小 "),s("br"),t._v("\n在移动端, 视口大小并不等于窗口大小, 移动端视口宽度被人为定义为了980 "),s("br")]),t._v(" "),s("p",[s("strong",[t._v("如何保证在移动端不自动缩放网页的尺寸")]),t._v(" "),s("br"),t._v("\n通过meta设置视口大小 "),s("br")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("viewport"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("width=device-width, initial-scale=1.0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("viewport 是指 web 页面上用户的可视区域。\n"),s("br")]),t._v(" "),s("p",[t._v("meta标签的属性:")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("width=device-width 设置视口宽度等于设备的宽度\ninitial-scale=1.0 初始缩放比例, 1不缩放\nmaximum-scale：允许用户缩放到的最大比例\nminimum-scale：允许用户缩放到的最小比例\nuser-scalable：用户是否可以手动缩放\n")])])]),s("h3",{attrs:{id:"content-type-有哪些？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#content-type-有哪些？"}},[t._v("#")]),t._v(" content-type 有哪些？")]),t._v(" "),s("p",[t._v("常见的媒体格式类型如下：")]),t._v(" "),s("ul",[s("li",[t._v("text/html ： HTML格式")]),t._v(" "),s("li",[t._v("text/plain ：纯文本格式")]),t._v(" "),s("li",[t._v("text/xml ： XML格式")]),t._v(" "),s("li",[t._v("image/gif ：gif图片格式")]),t._v(" "),s("li",[t._v("image/jpeg ：jpg图片格式")]),t._v(" "),s("li",[t._v("image/png：png图片格式")])]),t._v(" "),s("h3",{attrs:{id:"dom-的重绘-和-回流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dom-的重绘-和-回流"}},[t._v("#")]),t._v(" DOM 的重绘 和 回流")]),t._v(" "),s("p",[t._v("回流必将引起重绘，重绘不一定会引起回流")]),t._v(" "),s("h4",{attrs:{id:"回流-reflow"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#回流-reflow"}},[t._v("#")]),t._v(" 回流 (Reflow)")]),t._v(" "),s("p",[t._v("当"),s("strong",[t._v("Render Tree ")]),t._v("中部分或全部元素的尺寸、结构、或某些属性发生改变时，浏览器重新渲染部分或全部文档的过程称为回流。")]),t._v(" "),s("p",[t._v("会导致回流的操作：")]),t._v(" "),s("ul",[s("li",[t._v("页面首次渲染")]),t._v(" "),s("li",[t._v("浏览器窗口大小发生改变")]),t._v(" "),s("li",[t._v("元素尺寸或位置发生改变")]),t._v(" "),s("li",[t._v("元素内容变化（文字数量或图片大小等等）")]),t._v(" "),s("li",[t._v("元素字体大小变化")]),t._v(" "),s("li",[t._v("添加或者删除可见的DOM元素")]),t._v(" "),s("li",[t._v("激活CSS伪类（例如：:hover）")]),t._v(" "),s("li",[t._v("查询某些属性或调用某些方法")])]),t._v(" "),s("h4",{attrs:{id:"重绘-repaint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重绘-repaint"}},[t._v("#")]),t._v(" 重绘 (Repaint)")]),t._v(" "),s("p",[t._v("当页面中元素样式的改变并不影响它在文档流中的位置时（例如：color、background-color、visibility等），浏览器会将新样式赋予给元素并重新绘制它，这个过程称为重绘。")]),t._v(" "),s("p",[t._v("现代浏览器会对频繁的回流或重绘操作进行优化：")]),t._v(" "),s("p",[t._v("浏览器会维护一个队列，把所有引起回流和重绘的操作放入队列中，如果队列中的任务数量或者时间间隔达到一个阈值的，浏览器就会将队列清空，进行一次批处理，这样可以把多次回流和重绘变成一次。")]),t._v(" "),s("h2",{attrs:{id:"css篇"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#css篇"}},[t._v("#")]),t._v(" CSS篇")]),t._v(" "),s("h3",{attrs:{id:"说说盒模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说说盒模型"}},[t._v("#")]),t._v(" 说说盒模型")]),t._v(" "),s("p",[t._v("盒模型的组成，由里向外content,padding,border,margin."),s("br"),t._v("\n在IE盒子模型中，width表示content+padding+border这三个部分的宽度"),s("br"),t._v("\n在标准的盒子模型中，width指content部分的宽度")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("box-sizing：content-box;  width=内容区宽度\nbox-sizing：border-box;   width=内容区宽度+padding宽度+margin宽度\n")])])]),s("h3",{attrs:{id:"如何解决外边距叠加的问题？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何解决外边距叠加的问题？"}},[t._v("#")]),t._v(" 如何解决外边距叠加的问题？")]),t._v(" "),s("p",[t._v("边界重叠是指两个或多个盒子(可能相邻也可能嵌套)的相邻边界(其间没有任何非空内容、补白、边框)重合在一起而形成一个单一边界。"),s("br")]),t._v(" "),s("p",[t._v("原因如果块元素的 margin-top 与它的第一个子元素的 margin-top 之间没有 border、padding、inline content、 clearance 来分隔，或者块元素的 margin-bottom 与它的最后一个子元素的 margin-bottom 之间没有 border、padding、inline content、height、min-height、 max-height 分隔，那么外边距会塌陷。子元素多余的外边距会被父元素的外边距截断。")]),t._v(" "),s("ul",[s("li",[t._v("全部都为正值，发生边距重叠我们取得是最大值")]),t._v(" "),s("li",[t._v("不全是正值，则都取绝对值，然后用正值的最大值减去绝对值的最大值")]),t._v(" "),s("li",[t._v("没有正值，则都取绝对值，然后用0减去最大值")]),t._v(" "),s("li",[t._v("假设有一个空元素，它有外边距，但是没有边框或填充。在这种情况下，上外边距与下外边距就碰到了一起")])]),t._v(" "),s("h3",{attrs:{id:"为什么padding-bottom-是基于父元素的宽度而不是父元素的高度计算的？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么padding-bottom-是基于父元素的宽度而不是父元素的高度计算的？"}},[t._v("#")]),t._v(" 为什么padding-bottom 是基于父元素的宽度而不是父元素的高度计算的？")]),t._v(" "),s("ul",[s("li",[t._v("margin/padding计算都基于一个值，width进行计算，这样能够保证top,right,bottom,left四个值的一致性")]),t._v(" "),s("li",[t._v("由于父元素的高度是根据其所包含的子元素进行计算的，如果子元素的margin/padding是基于父元素高度计算的话，那么会引起高度计算的循环依赖。")])]),t._v(" "),s("h2",{attrs:{id:"javascript篇"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript篇"}},[t._v("#")]),t._v(" JavaScript篇")]),t._v(" "),s("h3",{attrs:{id:"javascript是什么，它的优缺点是什么？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript是什么，它的优缺点是什么？"}},[t._v("#")]),t._v(" JavaScript是什么，它的优缺点是什么？")]),t._v(" "),s("p",[t._v("JavaScript是一种基于对象（Object）和事件驱动（Event Driven）并具有相对安全性的客户端脚本语言。是基于浏览器内核为html添加生命力的脚本语言"),s("br"),t._v("\n具有以下特点："),s("strong",[t._v("动态，弱类型，单线程，内置支持类 ")]),s("br"),t._v("\n优点:")]),t._v(" "),s("ul",[s("li",[t._v("js减少网络传输")]),t._v(" "),s("li",[t._v("js方便操纵html对象")]),t._v(" "),s("li",[t._v("js支持分布式运算")])]),t._v(" "),s("p",[t._v("缺点:")]),t._v(" "),s("ul",[s("li",[t._v("各个浏览器对js的支持程度不同")]),t._v(" "),s("li",[t._v("web安全对js一些功能有限制，例如读写、保存数据等")])]),t._v(" "),s("h3",{attrs:{id:"说说this"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说说this"}},[t._v("#")]),t._v(" 说说this")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" window"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("global\nobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" obj\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" xx\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" xx\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" xx\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" 新的对象\n"),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" 外面的 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v("\n")])])]),s("h2",{attrs:{id:"es6篇"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es6篇"}},[t._v("#")]),t._v(" ES6篇")]),t._v(" "),s("h3",{attrs:{id:"var、let、const之间的区别-必问"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#var、let、const之间的区别-必问"}},[t._v("#")]),t._v(" var、let、const之间的区别 (必问)")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1.var声明变量可以重复声明，而let不可以重复声明\n2.var是不受限于块级的，而let是受限于块级\n3.var会与window相映射（会挂一个属性），而let不与window相映射\n4.var可以在声明的上面访问变量，而let有暂存死区，在声明的上面访问变量会报错\n5.const声明之后必须赋值，否则会报错\n6.const定义不可变的量，改变了就会报错\n7.const和let一样不会与window相映射、支持块级作用域、在声明的上面访问变量会报错\n")])])]),s("h3",{attrs:{id:"for-in-和for-of有什么区别？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-in-和for-of有什么区别？"}},[t._v("#")]),t._v(" for...in 和for...of有什么区别？")]),t._v(" "),s("p",[t._v("ES6规定，有所部署了载了Iterator接口的对象"),s("strong",[t._v("(可遍历对象)")]),t._v("都可以通过for...of去遍历，而for..in仅仅可以遍历对象。"),s("br"),t._v("\n这也就意味着，数组也可以用for...of遍历，这极大地方便了数组的取值，且避免了很多程序用for..in去遍历数组的恶习。")]),t._v(" "),s("h3",{attrs:{id:"为啥大多数情况都使用箭头函数？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为啥大多数情况都使用箭头函数？"}},[t._v("#")]),t._v(" 为啥大多数情况都使用箭头函数？")]),t._v(" "),s("ul",[s("li",[t._v("作用域安全性:当箭头函数被一致使用时，所有东西都保证使用与根对象相同的thisObject。如果一个标准函数回调与一堆箭头函数混合在一起，那么作用域就有可能变得混乱。")]),t._v(" "),s("li",[t._v("紧凑性:箭头函数更容易读写。")]),t._v(" "),s("li",[t._v("清晰度:使用箭头函数可明确知道当前 this 指向。")])]),t._v(" "),s("h3",{attrs:{id:"js-的提升是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-的提升是什么"}},[t._v("#")]),t._v(" JS 的提升是什么")]),t._v(" "),s("p",[t._v("提升是指 JS 解释器将所有变量和函数声明移动到当前作用域顶部的操作，提升有两种类型")]),t._v(" "),s("ul",[s("li",[t._v("变量提升")]),t._v(" "),s("li",[t._v("函数提升")])]),t._v(" "),s("p",[t._v("只要一个"),s("font",{attrs:{color:"red"}},[t._v("var")]),t._v("(或函数声明)出现在一个作用域内，这个声明就被认为属于整个作用域，并且可以在任何地方访问。")],1),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正常运行, foo 已被提升")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a                        \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n")])])]),s("h3",{attrs:{id:"es6-中的临时死区是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es6-中的临时死区是什么"}},[t._v("#")]),t._v(" ES6 中的临时死区是什么")]),t._v(" "),s("p",[t._v("在 ES6 中，let 和const 跟 var、class和function一样也会被提升，只是在进入作用域和被声明之间有一段时间不能访问它们，这段时间是临时死区(TDZ)。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//console.log(aLet)  // would throw ReferenceError")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" aLet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aLet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\naLet "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("aLet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10")]),t._v("\n")])])]),s("h2",{attrs:{id:"http篇"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http篇"}},[t._v("#")]),t._v(" HTTP篇")]),t._v(" "),s("h3",{attrs:{id:"http和https的区别-必考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http和https的区别-必考"}},[t._v("#")]),t._v(" HTTP和HTTPS的区别(必考)")]),t._v(" "),s("p",[t._v("HTTP 的URL 以http:// 开头，而HTTPS 的URL 以https:// 开头 "),s("br"),t._v("\nHTTP 是明文传输，HTTPS 通过 SSL\\TLS 进行了加密"),s("br"),t._v("\nHTTP 的端口号是 80，HTTPS 是 443"),s("br"),t._v("\nHTTPS 需要到 CA 申请证书，一般免费证书很少，需要交费"),s("br"),t._v("\nHTTP 的连接很简单，是无状态的；"),s("br"),t._v("\nHTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议安全。")]),t._v(" "),s("h3",{attrs:{id:"http的特性和状态码说一下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http的特性和状态码说一下"}},[t._v("#")]),t._v(" HTTP的特性和状态码说一下")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("区分状态码\n1××开头  - 信息提示\n2××开头  - 请求成功\n3××开头  - 请求被重定向\n4××开头  - 请求错误\n5××开头  - 服务器错误\n\n常见状态码\n200 OK 客户端请求成功。\n301 Moved Permanently 请求永久重定向。\n302 Moved Temporarily 请求临时重定向。\n304 Not Modified 文件未修改，可以直接使用缓存的文件。\n400 Bad Request 由于客户端请求有语法错误，不能被服务器所理解。\n401 Unauthorized 请求未经授权，无法访问。\n403 Forbidden 服务器收到请求，但是拒绝提供服务。服务器通常会在响应正文中给出不提供服务的原因。\n404 Not Found 请求的资源不存在，比如输入了错误的URL。\n500 Internal Server Error 服务器发生不可预期的错误，导致无法完成客户端的请求。\n503 Service Unavailable 服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常。\n\n补充：301 和 302 的区别是什么？\n301 永久重定向，浏览器会记住\n302 临时重定向\n")])])]),s("h3",{attrs:{id:"详细说一下-tcp-的三次握手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#详细说一下-tcp-的三次握手"}},[t._v("#")]),t._v(" 详细说一下 TCP 的三次握手")]),t._v(" "),s("ol",[s("li",[t._v("第一次握手(SYN=1, seq=x):")])]),t._v(" "),s("blockquote",[s("ol",[s("li",[t._v("客户端发送一个 TCP的 SYN 标志位置1的包，指明客户端打算连接的服务器的端口(请求同步)，并选择序号 seq=x，表明传送数据时的第一个数据字节的序号是 x。(seq是个随机值)")]),t._v(" "),s("li",[t._v("发送完毕后，客户端进入 SYN_SEND 状态。")])])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("第二次握手(SYN=1, ACK=1, seq=y, ack=x+1):")])]),t._v(" "),s("blockquote",[s("ol",[s("li",[t._v("服务器的TCP收到连接请求报文段后，如同意，则发回确认包(ACK)应答。即 SYN 标志位和 ACK 标志位均为1。服务器端选择自己 ISN 序列号(随机值y)，放到seq 域里，同时将确认序号ack设置为客户的 ISN 加1，即 x+1(即回复对方确认收到了序列号为x开始的包，且希望下次的数据从x+1的位置开始)。")]),t._v(" "),s("li",[t._v("发送完毕后，服务器端进入 SYN_RCVD 状态。")])])]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("第三次握手(ACK=1，ack=y+1，seq=x+1)")])]),t._v(" "),s("blockquote",[s("ol",[s("li",[t._v("客户端收到此报文段后再次发送确认包(ACK)，SYN 标志位为0，ACK 标志位为1，并且把服务器发来 ACK 的序号字段+1，放在确定字段ack中发送给对方，并且告诉服务器自己的seq=x+1")]),t._v(" "),s("li",[t._v("发送完毕后，客户端进入 ESTABLISHED 状态，当服务器端接收到这个包时，也进入 ESTABLISHED 状态，TCP握手结束。")])])]),t._v(" "),s("h3",{attrs:{id:"怎么跨域？jsonp-是什么？cors-是什么？postmessage-是什么？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#怎么跨域？jsonp-是什么？cors-是什么？postmessage-是什么？"}},[t._v("#")]),t._v(" 怎么跨域？JSONP 是什么？CORS 是什么？postMessage 是什么？")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[t._v("因为浏览器出于安全考虑，有同源策略。也就是说，如果协议、域名或者端口有一个不同就是跨域，Ajax 请求会失败。\n为来防止CSRF攻击\n1.JSONP\n    JSONP 的原理很简单，就是利用 "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token script"}},[s("span",{pre:!0,attrs:{class:"token language-javascript"}},[t._v(" 标签没有跨域限制的漏洞。\n    通过 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 标签指向一个需要访问的地址并提供一个回调函数来接收数据当需要通讯时。\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script src"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://domain/api?param1=a&param2=b&callback=jsonp"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token script"}},[s("span",{pre:!0,attrs:{class:"token language-javascript"}},[t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("jsonp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        \tconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    ")])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    JSONP 使用简单且兼容性不错，但是只限于 get 请求。\n2.CORS\n    CORS 需要浏览器和后端同时支持，需要设置 Access-Control-Allow-Origin:http://foo.example\n    IE 8 和 9 需要通过 XDomainRequest 来实现。\n3.postMessage\n    这种方式通常用于获取嵌入页面中的第三方页面数据。一个页面发送消息，另一个页面判断来源并接收消息\n    \n补充：\nJSONP和AJAX相比的优缺点？\n1.JSONP可以跨域 \n2.因为JSONP是通过script标签发送的GET请求，所以读不到AJAX那么精确的状态码\n")])])]),s("h3",{attrs:{id:"http请求方法有哪些？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http请求方法有哪些？"}},[t._v("#")]),t._v(" HTTP请求方法有哪些？")]),t._v(" "),s("h4",{attrs:{id:"get"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get"}},[t._v("#")]),t._v(" GET")]),t._v(" "),s("p",[t._v("GET请求会显示请求指定的资源。一般来说GET方法应该只用于数据的读取，而不应当用于会产生副作用的非幂等的操作中。")]),t._v(" "),s("h4",{attrs:{id:"head"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#head"}},[t._v("#")]),t._v(" HEAD")]),t._v(" "),s("p",[t._v("HEAD方法与GET方法一样，都是向服务器发出指定资源的请求。但是，服务器在响应HEAD请求时不会回传资源的内容部分，即：响应主体。这样，我们可以不传输全部内容的情况下，就可以获取服务器的响应头信息。HEAD方法常被用于客户端查看服务器的性能。")]),t._v(" "),s("h4",{attrs:{id:"post"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#post"}},[t._v("#")]),t._v(" POST")]),t._v(" "),s("p",[t._v("POST请求会 向指定资源提交数据，请求服务器进行处理，如：表单数据提交、文件上传等，请求数据会被包含在请求体中。POST方法是非幂等的方法，因为这个请求可能会创建新的资源或/和修改现有资源。")]),t._v(" "),s("h4",{attrs:{id:"put"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#put"}},[t._v("#")]),t._v(" PUT")]),t._v(" "),s("p",[t._v("PUT请求会身向指定资源位置上传其最新内容，PUT方法是幂等的方法。通过该方法客户端可以将指定资源的最新数据传送给服务器取代指定的资源的内容。")]),t._v(" "),s("h4",{attrs:{id:"delete"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#delete"}},[t._v("#")]),t._v(" DELETE")]),t._v(" "),s("p",[t._v("DELETE请求用于请求服务器删除所请求URI（统一资源标识符，Uniform Resource Identifier）所标识的资源。DELETE请求后指定资源会被删除，DELETE方法也是幂等的。")]),t._v(" "),s("h4",{attrs:{id:"options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[t._v("#")]),t._v(" OPTIONS")]),t._v(" "),s("p",[t._v("OPTIONS请求与HEAD类似，一般也是用于客户端查看服务器的性能。 这个方法会请求服务器返回该资源所支持的所有HTTP请求方法，该方法会用'*'来代替资源名称，向服务器发送OPTIONS请求，可以测试服务器功能是否正常。JavaScript的XMLHttpRequest对象进行CORS跨域资源共享时，就是使用OPTIONS方法发送嗅探请求，以判断是否有对指定资源的访问权限。")]),t._v(" "),s("h3",{attrs:{id:"get，post的区别？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get，post的区别？"}},[t._v("#")]),t._v(" GET，POST的区别？")]),t._v(" "),s("ul",[s("li",[t._v("提交数据存储位置不同\nGET请求会将数据放到URL后面POST请求会将数据放到请求体中")]),t._v(" "),s("li",[t._v("对提交的数据大小限制不同\nGET请求对所发信息量的限制是2000个字符POST请求对信息量没有限制")]),t._v(" "),s("li",[t._v("对提交的数据编码不同\nGET请求的参数只能是ASCII码，所以中文需要URL编码POST请求传参没有这个限制")]),t._v(" "),s("li",[t._v("应用场景不同\nGET请求用于提交非敏感数据和小数据POST请求用于提交敏感数据和大数据")]),t._v(" "),s("li",[t._v("get请求可以被缓存，post不可以被缓存")]),t._v(" "),s("li",[t._v("get后退不会有影响，post后退会重新进行提交")]),t._v(" "),s("li",[t._v("get请求的记录会留在历史记录中，post请求不会留在历史记录")])]),t._v(" "),s("h3",{attrs:{id:"tcp-跟-udp的区别？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-跟-udp的区别？"}},[t._v("#")]),t._v(" TCP 跟 UDP的区别？")]),t._v(" "),s("p",[t._v("TCP（Transmission Control Protocol，传输控制协议）是面向连接的协议，也就是说，在收发数据前，必须和对方建立可靠的连接。"),s("br")]),t._v(" "),s("p",[t._v("UDP是一个非连接的协议，传输数据之前源端和终端不建立连接， 当它想传送时就简单地去抓取来自应用程序的数据，并尽可能快地把它扔到网络上。")]),t._v(" "),s("p",[t._v("区别：")]),t._v(" "),s("ol",[s("li",[t._v("基于连接与无连接；")]),t._v(" "),s("li",[t._v("对系统资源的要求（TCP较多，UDP少）；")]),t._v(" "),s("li",[t._v("UDP程序结构较简单；")]),t._v(" "),s("li",[t._v("流模式与数据报模式 ；")]),t._v(" "),s("li",[t._v("TCP保证数据正确性，UDP可能丢包；")]),t._v(" "),s("li",[t._v("TCP保证数据顺序，UDP不保证。")])]),t._v(" "),s("h3",{attrs:{id:"cache-control-和-etag-的区别是什么？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cache-control-和-etag-的区别是什么？"}},[t._v("#")]),t._v(" Cache-Control 和 Etag 的区别是什么？")]),t._v(" "),s("p",[t._v("Cache-Control表示浏览器使用缓存，不向服务器发请求 "),s("br")]),t._v(" "),s("p",[t._v("ETag是会发请求的，只不过服务器根据请求的东西的内容有无变化来判断是否返回请求的资源")]),t._v(" "),s("h3",{attrs:{id:"cookie-是什么？session-是什么？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cookie-是什么？session-是什么？"}},[t._v("#")]),t._v(" Cookie 是什么？Session 是什么？")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1.Cookie:\n    HTTP响应通过 Set-Cookie 设置 Cookie\n    浏览器访问指定域名是必须带上 Cookie 作为 Request Header\n    Cookie 一般用来记录用户信息\n\n2.Session:\n    Session 是服务器端的内存（数据）\n    Session 一般通过在 Cookie 里记录 SessionID 实现\n    SessionID 一般是随机数\n")])])]),s("h2",{attrs:{id:"vue篇"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue篇"}},[t._v("#")]),t._v(" VUE篇")]),t._v(" "),s("h3",{attrs:{id:"说一下vue的优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说一下vue的优点"}},[t._v("#")]),t._v(" 说一下Vue的优点")]),t._v(" "),s("h4",{attrs:{id:"_1-体积小"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-体积小"}},[t._v("#")]),t._v(" 1. 体积小")]),t._v(" "),s("p",[t._v("压缩后只有33K;")]),t._v(" "),s("h4",{attrs:{id:"_2-更高的运行效率"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-更高的运行效率"}},[t._v("#")]),t._v(" 2. 更高的运行效率")]),t._v(" "),s("p",[t._v("基于虚拟DOM, 一种可以预选通过JavaScript进行各种计算, 把最终的DOM操作计算出来并优化的技术，由于这个DOM操作属于预处理操作， 并没有真正地操作DOM， 所以叫虚拟DOM。")]),t._v(" "),s("h4",{attrs:{id:"_3-双向数据绑定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-双向数据绑定"}},[t._v("#")]),t._v(" 3. 双向数据绑定")]),t._v(" "),s("p",[t._v("让开发者不用再去操作DOM对象, 把更多的精力投入到业务逻辑上。")]),t._v(" "),s("h4",{attrs:{id:"_4-生态丰富、学习成本低"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-生态丰富、学习成本低"}},[t._v("#")]),t._v(" 4. 生态丰富、学习成本低")]),t._v(" "),s("p",[t._v("市场上拥有大量成熟、稳重的基于Vue.js的UI框架、常用组件！拿来即用实现快速开发！\n对初学者友好、入门容易、学习资料多。")]),t._v(" "),s("h3",{attrs:{id:"说一下vue的生命周期-必考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说一下vue的生命周期-必考"}},[t._v("#")]),t._v(" 说一下Vue的生命周期(必考)")]),t._v(" "),s("p",[t._v("Vue 实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。通俗说就是 Vue 实例从创建到销毁的过程，就是生命周期。")]),t._v(" "),s("p",[t._v("Vue生命周期可以分为三个阶段：创建阶段、运行阶段、销毁阶段")]),t._v(" "),s("h4",{attrs:{id:"创建阶段的生命周期方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建阶段的生命周期方法"}},[t._v("#")]),t._v(" 创建阶段的生命周期方法")]),t._v(" "),s("ol",[s("li",[t._v("beforeCreate\n在调用beforeCreate的时候, 仅仅表示Vue实例刚刚被创建出来\n此时此刻还没有初始化好Vue实例中的数据和方法, 所以还不能访问Vue实例中保存的数据和方法")]),t._v(" "),s("li",[t._v("created\n在调用created的时候, 是我们最早能够访问Vue实例中保存的数据和方法的地方")]),t._v(" "),s("li",[t._v("beforeMount\n在调用beforeMount的时候, 表示Vue已经编译好了最终模板, 但是还没有将最终的模板渲染到界面上")]),t._v(" "),s("li",[t._v("mounted\n在调用mounted的时候, 表示Vue已经完成了模板的渲染, 我们已经可以拿到界面上渲染之后的内容了")])]),t._v(" "),s("h4",{attrs:{id:"运行阶段的生命周期方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运行阶段的生命周期方法"}},[t._v("#")]),t._v(" 运行阶段的生命周期方法")]),t._v(" "),s("ol",[s("li",[t._v("beforeUpdate\n在调用beforeUpdate的时候, 表示Vue实例中保存的数据被修改了\n只有保存的数据被修改了才会调用beforeUpdate, 否则不会调用\n在调用beforeUpdate的时候, 数据已经更新了, 但是界面还没有更新")]),t._v(" "),s("li",[t._v("updated\n在调用updated的时候, 表示Vue实例中保存的数据被修改了, 并且界面也同步了修改的数据了\n也就是说: 数据和界面都同步更新之后就会调用updated")])]),t._v(" "),s("h4",{attrs:{id:"销毁阶段的生命周期方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#销毁阶段的生命周期方法"}},[t._v("#")]),t._v(" 销毁阶段的生命周期方法")]),t._v(" "),s("ol",[s("li",[t._v("beforeDestroy\n在调用beforeDestroy的时候, 表示当前组件即将被销毁了\n只要组件不被销毁, 那么beforeDestroy就不会调用。beforeDestroy函数是我们最后能够访问到组件数据和方法的函数")]),t._v(" "),s("li",[t._v("destroyed\n在调用destroyed的时候, 表示当前组件已经被销毁了\n只要组件不被销毁, 那么destroyed就不会调用。在这个生命周期方法中无法再去操作组件中数据和方法")])]),t._v(" "),s("h3",{attrs:{id:"什么是组件以及如何使用组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是组件以及如何使用组件"}},[t._v("#")]),t._v(" 什么是组件以及如何使用组件")]),t._v(" "),s("p",[t._v("组件就是把一个很大的界面拆分为多个小的界面, 每一个小的界面就是一个组件\n将大界面拆分成小界面就是组件化")]),t._v(" "),s("p",[t._v("组件化的好处是可以简化Vue实例的代码，可以提高代码复用性\nVue的组件注册分为全局注册和局部注册")]),t._v(" "),s("p",[t._v("全局注册是在全局Vue对象的component属性中绑定定义好的模板"),s("br"),t._v("\n局部注册是在Vue实例的components属性中绑定定义好的模板"),s("br")]),t._v(" "),s("p",[t._v("如果是.vue文件的组件则需要通过import导入到需要的组件中。")]),t._v(" "),s("h3",{attrs:{id:"vue组件间是如何通信的-必考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue组件间是如何通信的-必考"}},[t._v("#")]),t._v(" Vue组件间是如何通信的(必考)")]),t._v(" "),s("p",[t._v("方法一、"),s("strong",[t._v("props/ $emit ")])]),t._v(" "),s("p",[t._v("在父组件中通过v-bind传递数据，在子组件中通过props接收数据\n在父组件中通过 v-on 传递方法，在子组件的自定义方法中通过 this.$emit('自定义接收名称'); 触发传递过来的方法")]),t._v(" "),s("p",[t._v("方法二、"),s("strong",[t._v(" $emit/ $on ")])]),t._v(" "),s("p",[t._v("这种方法通过一个空的Vue实例作为中央事件总线（事件中心），用它来触发事件和监听事件,巧妙而轻量地实现了任何组件间的通信，包括父子、兄弟、跨级。")]),t._v(" "),s("p",[t._v("方法三、"),s("strong",[t._v("vuex")])]),t._v(" "),s("p",[t._v("vuex 是 Vue 配套的 公共数据管理工具，我们可以将共享的数据保存到 vuex 中， 方便整个程序中的任何组件都可以获取和修改vuex中保存的公共数据")]),t._v(" "),s("ul",[s("li",[t._v("创建Vuex对象")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" store "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vuex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Store")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里的state就相当于组件中的data, 就是专门用于保存共享数据的")]),t._v("\n    state"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        msg"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"共享数据"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("在祖先组件中添加 store 的 key 保存Vuex对象")])]),t._v(" "),s("p",[t._v("只要祖先组件中保存了Vuex对象 , 那么祖先组件和所有的后代组件就可以使用Vuex中保存的共享数据了")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("store"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" store"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n")])])]),s("ul",[s("li",[t._v("在使用Vuex中保存的共享数据的时候, 必须通过如下的格式来使用")])]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("{{this.$store.state.msg}}"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("方法四：作用域插槽")]),t._v(" "),s("p",[t._v("作用域插槽就是带数据的插槽, 就是让父组件在填充子组件插槽内容时也能使用子组件的数据\n应用场景在于: 子组件提供数据, 父组件决定如何渲染")]),t._v(" "),s("ul",[s("li",[t._v('在slot中通过 v-bind:数据名称="数据名称" 方式暴露数据')]),t._v(" "),s("li",[t._v("在父组件中通过 "),s("code",[t._v('<template slot-scope="作用域名称">')]),t._v("接收数据")]),t._v(" "),s("li",[t._v("在父组件的 "),s("code",[t._v("<template></template>")]),t._v(" 中通过 作用域名称.数据名称 方式使用数据")])]),t._v(" "),s("p",[t._v("也就是说我们可以通过v-slot指令告诉Vue如何接收作用域插槽暴露的数据")]),t._v(" "),s("p",[t._v('格式： v-slot:插槽名称="作用域名称"'),s("br"),t._v('\n简写: #插槽名称="作用域名称"')]),t._v(" "),s("h3",{attrs:{id:"vue是如何实现双向数据绑定的-vue双向数据绑定原理-重点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue是如何实现双向数据绑定的-vue双向数据绑定原理-重点"}},[t._v("#")]),t._v(" Vue是如何实现双向数据绑定的(Vue双向数据绑定原理)(重点)")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Vue数据双向绑定是指：数据变化更新视图，视图变化更新数据，例如输入框输入内容变化时，data中的数据同步变化；data中的数据变化时，文本节点的内容同步变化\n\nVue主要通过以下4个步骤实现数据双向绑定:\n\n1.实现一个监听器「Observer」：\n    对数据对象进行遍历，包括子属性对象的属性，利用Object.defineProperty()在属性上都加上getter和setter，这样后，给对象的某个值赋值，就会触发setter，那么就能监听到数据变化\n2.实现一个解析器「Compile」：\n    解析Vue模板指令，将模板中的变量都替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，调用更新函数进行数据更新\n3.实现一个订阅者「Watcher」：\n    Watcher订阅者是Observer和Compile之间通信的桥梁，主要任务是订阅Observer中的属性值变化的消息，当收到属性值变化的消息时，触发解析器Compile中对应的更新函数\n4.实现一个订阅器「Dep」：\n    订阅器采用发布-订阅设计模式，用来收集订阅者Watcher，对监听器Observer和订阅者Watcher进行统一管理\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);